{"version":3,"file":null,"sources":["../src/index.js"],"sourcesContent":["// Copyright 2016, Google, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nimport { utils } from 'js-data';\nimport Datastore from '@google-cloud/datastore';\nimport {\n  Adapter,\n  reserved\n} from 'js-data-adapter';\n\nconst DATASTORE_DEFAULTS = {\n  projectId: process.env.GCLOUD_PROJECT\n};\n\nconst equal = function (query, field, value) {\n  return query.filter(field, '=', value);\n};\n\n/**\n * Default predicate functions for the filtering operators.\n *\n * @name module:js-data-cloud-datastore.OPERATORS\n * @property {function} == Equality operator.\n * @property {function} > \"Greater than\" operator.\n * @property {function} >= \"Greater than or equal to\" operator.\n * @property {function} < \"Less than\" operator.\n * @property {function} <= \"Less than or equal to\" operator.\n */\nexport const OPERATORS = {\n  '==': equal,\n  '===': equal,\n  '>': function (query, field, value) {\n    return query.filter(field, '>', value);\n  },\n  '>=': function (query, field, value) {\n    return query.filter(field, '>=', value);\n  },\n  '<': function (query, field, value) {\n    return query.filter(field, '<', value);\n  },\n  '<=': function (query, field, value) {\n    return query.filter(field, '<=', value);\n  }\n};\n\n/**\n * CloudDatastoreAdapter class.\n *\n * @example\n * // Use Container instead of DataStore on the server\n * import {Container} from 'js-data'\n * import {CloudDatastoreAdapter} from 'js-data-cloud-datastore'\n *\n * // Create a store to hold your Mappers\n * const store = new Container()\n *\n * // Create an instance of CloudDatastoreAdapter with default settings\n * const adapter = new CloudDatastoreAdapter()\n *\n * // Mappers in \"store\" will use the CloudDatastore adapter by default\n * store.registerAdapter('datastore', adapter, { default: true })\n *\n * // Create a Mapper that maps to a \"user\" table\n * store.defineMapper('user')\n *\n * @class CloudDatastoreAdapter\n * @extends Adapter\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Adapter#debug}.\n * @param {function} [opts.datastore] See {@link CloudDatastoreAdapter#datastore}.\n * @param {object} [opts.datastoreOpts] See {@link CloudDatastoreAdapter#datastoreOpts}.\n * Ignored if you provide a pre-configured datastore instance.\n * @param {boolean} [opts.raw=false] See {@link Adapter#raw}.\n */\nexport function CloudDatastoreAdapter (opts) {\n  utils.classCallCheck(this, CloudDatastoreAdapter);\n  opts || (opts = {});\n\n  // Setup non-enumerable properties\n  Object.defineProperties(this, {\n    /**\n     * Instance of Datastore used by this adapter. Use this directly when\n     * you need to write custom queries.\n     *\n     * @name CloudDatastoreAdapter#datastore\n     * @type {object}\n     */\n    datastore: {\n      writable: true,\n      value: undefined\n    }\n  });\n\n  Adapter.call(this, opts);\n\n  /**\n   * Options to be passed to a new Datastore instance, if one wasn't provided.\n   *\n   * @name CloudDatastoreAdapter#datastoreOpts\n   * @type {object}\n   * @default {}\n   * @property {string} projectId Google Cloud Platform project id.\n   */\n  this.datastoreOpts || (this.datastoreOpts = {});\n  utils.fillIn(this.datastoreOpts, DATASTORE_DEFAULTS);\n\n  /**\n   * Override the default predicate functions for the specified operators.\n   *\n   * @name CloudDatastoreAdapter#operators\n   * @type {object}\n   * @default {}\n   */\n  this.operators || (this.operators = {});\n  utils.fillIn(this.operators, OPERATORS);\n\n  this.datastore || (this.datastore = Datastore(this.datastoreOpts));\n}\n\nAdapter.extend({\n  constructor: CloudDatastoreAdapter,\n\n  /**\n   * Apply the specified selection query to the provided Datastore query.\n   *\n   * @method CloudDatastoreAdapter#filterQuery\n   * @param {object} mapper The mapper.\n   * @param {object} [query] Selection query.\n   * @param {object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   */\n  filterQuery (dsQuery, query, opts) {\n    query = utils.plainCopy(query || {});\n    opts || (opts = {});\n    opts.operators || (opts.operators = {});\n    query.where || (query.where = {});\n    query.orderBy || (query.orderBy = query.sort);\n    query.orderBy || (query.orderBy = []);\n    query.skip || (query.skip = query.offset);\n\n    // Transform non-keyword properties to \"where\" clause configuration\n    utils.forOwn(query, (config, keyword) => {\n      if (reserved.indexOf(keyword) === -1) {\n        if (utils.isObject(config)) {\n          query.where[keyword] = config;\n        } else {\n          query.where[keyword] = {\n            '==': config\n          };\n        }\n        delete query[keyword];\n      }\n    });\n\n    // Apply filter\n    if (Object.keys(query.where).length !== 0) {\n      utils.forOwn(query.where, (criteria, field) => {\n        if (!utils.isObject(criteria)) {\n          query.where[field] = {\n            '==': criteria\n          };\n        }\n\n        utils.forOwn(criteria, (value, operator) => {\n          let isOr = false;\n          let _operator = operator;\n          if (_operator && _operator[0] === '|') {\n            _operator = _operator.substr(1);\n            isOr = true;\n          }\n          const predicateFn = this.getOperator(_operator, opts);\n          if (predicateFn) {\n            if (isOr) {\n              throw new Error(`Operator ${operator} not supported!`);\n            } else {\n              dsQuery = predicateFn(dsQuery, field, value);\n            }\n          } else {\n            throw new Error(`Operator ${operator} not supported!`);\n          }\n        });\n      });\n    }\n\n    // Apply sort\n    if (query.orderBy) {\n      if (utils.isString(query.orderBy)) {\n        query.orderBy = [\n          [query.orderBy, 'asc']\n        ];\n      }\n      query.orderBy.forEach((clause) => {\n        if (utils.isString(clause)) {\n          clause = [clause, 'asc'];\n        }\n        dsQuery = clause[1].toUpperCase() === 'DESC' ? dsQuery.order(clause[0], { descending: true }) : dsQuery.order(clause[0]);\n      });\n    }\n\n    // Apply skip/offset\n    if (query.skip) {\n      dsQuery = dsQuery.offset(+query.skip);\n    }\n\n    // Apply limit\n    if (query.limit) {\n      dsQuery = dsQuery.limit(+query.limit);\n    }\n\n    return dsQuery;\n  },\n\n  _count (mapper, query, opts) {\n    opts || (opts = {});\n    query || (query = {});\n\n    return new utils.Promise((resolve, reject) => {\n      let dsQuery = this.datastore.createQuery(this.getKind(mapper, opts));\n      dsQuery = this.filterQuery(dsQuery, query, opts).select('__key__');\n      this.datastore.runQuery(dsQuery, (err, entities) => {\n        if (err) {\n          return reject(err);\n        }\n        return resolve([entities ? entities.length : 0, {}]);\n      });\n    });\n  },\n\n  /**\n   * Internal method used by CloudDatastoreAdapter#_create and\n   * CloudDatastoreAdapter#_createMany.\n   *\n   * @method CloudDatastoreAdapter#_createHelper\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {(Object|Object[])} records The record or records to be created.\n   * @return {Promise}\n   */\n  _createHelper (mapper, records) {\n    const singular = !utils.isArray(records);\n    if (singular) {\n      records = [records];\n    }\n    records = utils.plainCopy(records);\n    return new utils.Promise((resolve, reject) => {\n      let apiResponse;\n      const idAttribute = mapper.idAttribute;\n      const incompleteKey = this.datastore.key([mapper.name]);\n\n      const transaction = this.datastore.transaction();\n      transaction.run((err) => {\n        if (err) {\n          return reject(err);\n        }\n        // Allocate ids\n        transaction.allocateIds(incompleteKey, records.length, (err, keys) => {\n          if (err) {\n            return reject(err);\n          }\n          const entities = records.map((_record, i) => {\n            utils.set(_record, idAttribute, keys[i].path[1]);\n            return {\n              key: keys[i],\n              data: _record\n            };\n          });\n          // Save records\n          transaction.save(entities);\n          apiResponse = {\n            created: singular ? 1 : entities.length\n          };\n          transaction.commit((err) => {\n            if (err) {\n              return reject(err);\n            }\n\n            // The transaction completed successfully.\n            return resolve([singular ? records[0] : records, apiResponse]);\n          });\n        });\n      });\n    });\n  },\n\n  /**\n   * Create a new record. Internal method used by Adapter#create.\n   *\n   * @method CloudDatastoreAdapter#_create\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {object} props The record to be created.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _create (mapper, props, opts) {\n    return this._createHelper(mapper, props, opts);\n  },\n\n  /**\n   * Create multiple records in a single batch. Internal method used by\n   * Adapter#createMany.\n   *\n   * @method CloudDatastoreAdapter#_createMany\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {object} props The records to be created.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _createMany (mapper, props, opts) {\n    return this._createHelper(mapper, props, opts);\n  },\n\n  /**\n   * Destroy the record with the given primary key. Internal method used by\n   * Adapter#destroy.\n   *\n   * @method CloudDatastoreAdapter#_destroy\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to destroy.\n   * response object.\n   * @return {Promise}\n   */\n  _destroy (mapper, id) {\n    return new utils.Promise((resolve, reject) => {\n      this.datastore.delete(this.datastore.key([mapper.name, id]), (err, apiResponse) => {\n        return err ? reject(err) : resolve([undefined, apiResponse]);\n      });\n    });\n  },\n\n  /**\n   * Destroy the records that match the selection query. Internal method used by\n   * Adapter#destroyAll.\n   *\n   * @method CloudDatastoreAdapter#_destroyAll\n   * @private\n   * @param {object} mapper the mapper.\n   * @param {object} [query] Selection query.\n   * @return {Promise}\n   */\n  _destroyAll (mapper, query, opts) {\n    return new utils.Promise((resolve, reject) => {\n      let dsQuery = this.datastore.createQuery(this.getKind(mapper, opts));\n      dsQuery = this.filterQuery(dsQuery, query, opts);\n      dsQuery = dsQuery.select('__key__');\n      this.datastore.runQuery(dsQuery, (err, entities) => {\n        if (err) {\n          return reject(err);\n        }\n        const keys = entities.map((entity) => entity.key);\n        this.datastore.delete(keys, (err, apiResponse) => {\n          if (err) {\n            return reject(err);\n          }\n          resolve([undefined, apiResponse]);\n        });\n      });\n    });\n  },\n\n  /**\n   * Retrieve the record with the given primary key. Internal method used by\n   * Adapter#find.\n   *\n   * @method CloudDatastoreAdapter#_find\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to retrieve.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _find (mapper, id, opts) {\n    return new utils.Promise((resolve, reject) => {\n      const key = this.datastore.key([this.getKind(mapper, opts), id]);\n      this.datastore.get(key, (err, entity) => {\n        return err ? reject(err) : resolve([entity ? entity.data : undefined, {}]);\n      });\n    });\n  },\n\n  /**\n   * Retrieve the records that match the selection query. Internal method used\n   * by Adapter#findAll.\n   *\n   * @method CloudDatastoreAdapter#_findAll\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {object} [query] Selection query.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _findAll (mapper, query, opts) {\n    return new utils.Promise((resolve, reject) => {\n      let dsQuery = this.datastore.createQuery(this.getKind(mapper, opts));\n      dsQuery = this.filterQuery(dsQuery, query, opts);\n      this.datastore.runQuery(dsQuery, (err, entities) => {\n        if (err) {\n          return reject(err);\n        }\n        return resolve([entities ? entities.map((entity) => entity.data) : [], {}]);\n      });\n    });\n  },\n\n  _sum (mapper, field, query, opts) {\n    if (!utils.isString(field)) {\n      throw new Error('field must be a string!');\n    }\n    opts || (opts = {});\n    query || (query = {});\n    const canSelect = !Object.keys(query).length;\n\n    return new utils.Promise((resolve, reject) => {\n      let dsQuery = this.datastore.createQuery(this.getKind(mapper, opts));\n      dsQuery = this.filterQuery(dsQuery, query, opts);\n      if (canSelect) {\n        dsQuery = dsQuery.select(field);\n      }\n      this.datastore.runQuery(dsQuery, (err, entities) => {\n        if (err) {\n          return reject(err);\n        }\n        const sum = entities.reduce((sum, entity) => sum + (entity.data[field] || 0), 0);\n        return resolve([sum, {}]);\n      });\n    });\n  },\n\n  /**\n   * Internal method used by CloudDatastoreAdapter#_update and\n   * CloudDatastoreAdapter#_updateAll and CloudDatastoreAdapter#_updateMany.\n   *\n   * @method CloudDatastoreAdapter#_updateHelper\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {(Object|Object[])} records The record or records to be updated.\n   * @param {(Object|Object[])} props The updates to apply to the record(s).\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _updateHelper (mapper, records, props, opts) {\n    const singular = !utils.isArray(records);\n    if (singular) {\n      records = [records];\n      props = [props];\n    }\n    return new utils.Promise((resolve, reject) => {\n      if (!records.length) {\n        return resolve([singular ? undefined : [], {}]);\n      }\n      const idAttribute = mapper.idAttribute;\n      const entities = [];\n      const _records = [];\n      records.forEach((record, i) => {\n        if (!record) {\n          return;\n        }\n        const id = utils.get(record, idAttribute);\n        if (!utils.isUndefined(id)) {\n          utils.deepMixIn(record, props[i]);\n          entities.push({\n            method: 'update',\n            key: this.datastore.key([this.getKind(mapper, opts), id]),\n            data: record\n          });\n          _records.push(record);\n        }\n      });\n      if (!_records.length) {\n        return resolve([singular ? undefined : [], {}]);\n      }\n      this.datastore.save(entities, (err, apiResponse) => {\n        return err ? reject(err) : resolve([singular ? _records[0] : _records, apiResponse]);\n      });\n    });\n  },\n\n  /**\n   * Apply the given update to the record with the specified primary key.\n   * Internal method used by Adapter#update.\n   *\n   * @method CloudDatastoreAdapter#_update\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id The primary key of the record to be updated.\n   * @param {object} props The update to apply to the record.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _update (mapper, id, props, opts) {\n    props || (props = {});\n    return this._find(mapper, id, opts).then((result) => {\n      if (result[0]) {\n        props = utils.plainCopy(props);\n        return this._updateHelper(mapper, result[0], props, opts);\n      }\n      throw new Error('Not Found');\n    });\n  },\n\n  /**\n   * Apply the given update to all records that match the selection query.\n   * Internal method used by Adapter#updateAll.\n   *\n   * @method CloudDatastoreAdapter#_updateAll\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {object} props The update to apply to the selected records.\n   * @param {object} [query] Selection query.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _updateAll (mapper, props, query, opts) {\n    props || (props = {});\n    return this._findAll(mapper, query, opts).then((result) => {\n      let [records] = result;\n      records = records.filter((record) => record);\n      if (records.length) {\n        props = utils.plainCopy(props);\n        return this._updateHelper(mapper, records, records.map(() => props), opts);\n      }\n      return [[], {}];\n    });\n  },\n\n  /**\n   * Update the given records in a single batch. Internal method used by\n   * Adapter#updateMany.\n   *\n   * @method CloudDatastoreAdapter#_updateMany\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {Object[]} records The records to update.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _updateMany (mapper, records, opts) {\n    records || (records = []);\n    const idAttribute = mapper.idAttribute;\n    const tasks = records.map((record) => this._find(mapper, utils.get(record, idAttribute), opts));\n    return utils.Promise.all(tasks).then((results) => {\n      let _records = results.map((result) => result[0]);\n      _records.forEach((record, i) => {\n        if (!record) {\n          records[i] = undefined;\n        }\n      });\n      _records = _records.filter((record) => record);\n      records = records.filter((record) => record);\n      if (_records.length) {\n        records = utils.plainCopy(records);\n        return this._updateHelper(mapper, _records, records, opts);\n      }\n      return [[], {}];\n    });\n  },\n\n  loadBelongsTo (mapper, def, records, __opts) {\n    if (utils.isObject(records) && !utils.isArray(records)) {\n      return Adapter.prototype.loadBelongsTo.call(this, mapper, def, records, __opts);\n    }\n    throw new Error('findAll with belongsTo not supported!');\n  },\n\n  loadHasMany (mapper, def, records, __opts) {\n    if (utils.isObject(records) && !utils.isArray(records)) {\n      return Adapter.prototype.loadHasMany.call(this, mapper, def, records, __opts);\n    }\n    throw new Error('findAll with hasMany not supported!');\n  },\n\n  loadHasOne (mapper, def, records, __opts) {\n    if (utils.isObject(records) && !utils.isArray(records)) {\n      return Adapter.prototype.loadHasOne.call(this, mapper, def, records, __opts);\n    }\n    throw new Error('findAll with hasOne not supported!');\n  },\n\n  loadHasManyLocalKeys () {\n    throw new Error('find/findAll with hasMany & localKeys not supported!');\n  },\n\n  loadHasManyForeignKeys () {\n    throw new Error('find/findAll with hasMany & foreignKeys not supported!');\n  },\n\n  /**\n   * Resolve the Cloud Datastore kind for the specified Mapper with the given\n   * options.\n   *\n   * @method CloudDatastoreAdapter#getKind\n   * @param {object} mapper The mapper.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.kind] Datastore kind.\n   * @return {string} The kind.\n   */\n  getKind (mapper, opts) {\n    opts || (opts = {});\n    return utils.isUndefined(opts.kind) ? (utils.isUndefined(mapper.kind) ? mapper.name : mapper.kind) : opts.kind;\n  },\n\n  /**\n   * Resolve the predicate function for the specified operator based on the\n   * given options and this adapter's settings.\n   *\n   * @method CloudDatastoreAdapter#getOperator\n   * @param {string} operator The name of the operator.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @return {*} The predicate function for the specified operator.\n   */\n  getOperator (operator, opts) {\n    opts || (opts = {});\n    opts.operators || (opts.operators = {});\n    let ownOps = this.operators || {};\n    return utils.isUndefined(opts.operators[operator]) ? ownOps[operator] || OPERATORS[operator] : opts.operators[operator];\n  }\n});\n\n/**\n * Details of the current version of the `js-data-cloud-datastore` module.\n *\n * @example <caption>ES2015 modules import</caption>\n * import {version} from 'js-data-cloud-datastore'\n * console.log(version.full)\n *\n * @example <caption>CommonJS import</caption>\n * var version = require('js-data-cloud-datastore').version\n * console.log(version.full)\n *\n * @name module:js-data-cloud-datastore.version\n * @type {object}\n * @property {string} version.full The full semver value.\n * @property {number} version.major The major version number.\n * @property {number} version.minor The minor version number.\n * @property {number} version.patch The patch version number.\n * @property {(string|boolean)} version.alpha The alpha version value,\n * otherwise `false` if the current version is not alpha.\n * @property {(string|boolean)} version.beta The beta version value,\n * otherwise `false` if the current version is not beta.\n */\nexport const version = '<%= version %>';\n\n/**\n * {@link CloudDatastoreAdapter} class.\n *\n * @example <caption>ES2015 modules import</caption>\n * import {CloudDatastoreAdapter} from 'js-data-cloud-datastore'\n * const adapter = new CloudDatastoreAdapter()\n *\n * @example <caption>CommonJS import</caption>\n * var CloudDatastoreAdapter = require('js-data-cloud-datastore').CloudDatastoreAdapter\n * var adapter = new CloudDatastoreAdapter()\n *\n * @name module:js-data-cloud-datastore.CloudDatastoreAdapter\n * @see CloudDatastoreAdapter\n * @type {Constructor}\n */\n\n/**\n * Registered as `js-data-cloud-datastore` in NPM.\n *\n * @example <caption>Install from NPM</caption>\n * npm i --save js-data-cloud-datastore@rc js-data@rc @google-cloud/datastore\n *\n * @example <caption>ES2015 modules import</caption>\n * import {CloudDatastoreAdapter} from 'js-data-cloud-datastore'\n * const adapter = new CloudDatastoreAdapter()\n *\n * @example <caption>CommonJS import</caption>\n * var CloudDatastoreAdapter = require('js-data-cloud-datastore').CloudDatastoreAdapter\n * var adapter = new CloudDatastoreAdapter()\n *\n * @module js-data-cloud-datastore\n */\n"],"names":["Adapter","utils","reserved"],"mappings":"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"}